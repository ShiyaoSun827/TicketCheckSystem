generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum WaitStatus {
  PENDING
  CONFIRMED
  CANCELLED
  READY
}

model User {
  id              String     @id
  name            String
  email           String
  emailVerified   Boolean
  image           String?
  createdAt       DateTime
  updatedAt       DateTime
  username        String?
  displayUsername String?
  sessions        Session[]
  accounts        Account[]
  waitlist        WaitList[] // ✅ reverse relation

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@unique([email])
  @@unique([username])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Ticket {
  id     String @id @default(uuid())
  //user        User     @relation(fields: [userID], references: [id])
  userID String
  show   Show   @relation(fields: [showID], references: [id])
  showID String
  price  Float
  seat   String
  type   String
  qrCode String

  // booking     BookingRecord? ← comment out

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Seat      Seat[]
}

model Show {
  id        String     @id @default(uuid())
  beginTime DateTime
  endTime   DateTime
  status    ShowStatus @default(DRAFT)
  cancelled Boolean    @default(false)

  movie   Movie  @relation(fields: [movieID], references: [id], onDelete: Cascade)
  movieID String

  price Float // 🆕 添加价格字段（不带默认值）

  tickets   Ticket[]
  waitlist  WaitList[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Seat      Seat[]
}

model Seat {
  id     String @id @default(uuid())
  row    String
  col    Int
  show   Show   @relation(fields: [showId], references: [id], onDelete: Cascade)
  showId String

  reserved Boolean @default(false)

  ticket   Ticket? @relation(fields: [ticketId], references: [id])
  ticketId String?

  @@unique([showId, row, col]) // 同一个场次不能重复座位
}

enum ShowStatus {
  DRAFT
  PUBLISHED
  CANCELLED
}

model Movie {
  id          String   @id @default(uuid())
  name        String
  length      Int // 电影时长（单位：秒）
  rate        Float // 电影评分（0-10 的小数）
  image       String? // 保存图片 URL，例如 "/images/your-image.jpg"
  description String?
  shows       Show[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model WaitList {
  id        String     @id @default(uuid())
  userID    String
  showID    String
  status    WaitStatus @default(PENDING)
  createdAt DateTime   @default(now())

  // Relations
  user User @relation(fields: [userID], references: [id])
  show Show @relation(fields: [showID], references: [id])
}

model QRScanRecord {
  id        String   @id @default(uuid())
  qrCode    String
  scanTime  DateTime
  status    String
  scannedBy String
}

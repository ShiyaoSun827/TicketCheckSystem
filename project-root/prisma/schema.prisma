generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum WaitStatus {
  PENDING
  CONFIRMED
  CANCELLED
  READY
}

model Favorite {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  movie     Movie    @relation(fields: [movieId], references: [id])
  movieId   String
  createdAt DateTime @default(now())

  @@unique([userId, movieId]) // Èò≤Ê≠¢ÈáçÂ§çÊî∂Ëóè
}

model User {
  id              String     @id
  name            String
  email           String
  emailVerified   Boolean
  image           String?
  createdAt       DateTime
  updatedAt       DateTime
  username        String?
  displayUsername String?
  sessions        Session[]
  accounts        Account[]
  waitlist        WaitList[] // ‚úÖ reverse relation

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?
  Wallet     Wallet?
  CartItem   CartItem[]
  Order      Order[]
  Ticket     Ticket[]
  Favorite   Favorite[]

  @@unique([email])
  @@unique([username])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Ticket {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userID], references: [id])
  userID String

  show   Show   @relation(fields: [showId], references: [id])
  showId String

  seatRow String
  seatCol Int

  qrCode    String? // ‰∫åÁª¥Á†ÅÂÜÖÂÆπÊàñÂõæÁâáÂú∞ÂùÄ
  status    String   @default("VALID") // VALID / CHECKED / CANCELLED Á≠â
  createdAt DateTime @default(now())
  Seat      Seat[]
}

model Wallet {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  balance   Float    @default(0.0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions WalletTransaction[]
}

model WalletTransaction {
  id        String   @id @default(uuid())
  wallet    Wallet   @relation(fields: [walletId], references: [id])
  walletId  String
  type      String // "RECHARGE", "PAYMENT", "REFUND"
  amount    Float
  note      String?
  createdAt DateTime @default(now())
}

model CartItem {
  id      String   @id @default(uuid())
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  show    Show     @relation(fields: [showId], references: [id])
  showId  String
  seat    String // È¢ÑÈÄâÂ∫ß‰Ωç
  addedAt DateTime @default(now())
}

model Order {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  total     Float
  status    String // "PENDING", "PAID", "FAILED", "CANCELLED"
  createdAt DateTime @default(now())

  items OrderItem[]
}

model OrderItem {
  id      String @id @default(uuid())
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String
  show    Show   @relation(fields: [showId], references: [id])
  showId  String
  seat    String
  price   Float
}

model Show {
  id        String     @id @default(uuid())
  beginTime DateTime
  endTime   DateTime
  status    ShowStatus @default(DRAFT)
  cancelled Boolean    @default(false)

  movie   Movie  @relation(fields: [movieID], references: [id], onDelete: Cascade)
  movieID String

  price Float // üÜï Ê∑ªÂä†‰ª∑Ê†ºÂ≠óÊÆµÔºà‰∏çÂ∏¶ÈªòËÆ§ÂÄºÔºâ

  tickets   Ticket[]
  waitlist  WaitList[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Seat      Seat[]
  CartItem  CartItem[]
  OrderItem OrderItem[]
}

model Seat {
  id     String @id @default(uuid())
  row    String
  col    Int
  show   Show   @relation(fields: [showId], references: [id], onDelete: Cascade)
  showId String

  reserved Boolean @default(false)

  ticket   Ticket? @relation(fields: [ticketId], references: [id])
  ticketId String?

  @@unique([showId, row, col]) // Âêå‰∏Ä‰∏™Âú∫Ê¨°‰∏çËÉΩÈáçÂ§çÂ∫ß‰Ωç
}

enum ShowStatus {
  DRAFT
  PUBLISHED
  CANCELLED
}

model Movie {
  id          String     @id @default(uuid())
  name        String
  length      Int // ÁîµÂΩ±Êó∂ÈïøÔºàÂçï‰ΩçÔºöÁßíÔºâ
  rate        Float // ÁîµÂΩ±ËØÑÂàÜÔºà0-10 ÁöÑÂ∞èÊï∞Ôºâ
  image       String? // ‰øùÂ≠òÂõæÁâá URLÔºå‰æãÂ¶Ç "/images/your-image.jpg"
  description String?
  shows       Show[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Favorite    Favorite[]
}

model WaitList {
  id        String     @id @default(uuid())
  userID    String
  showID    String
  status    WaitStatus @default(PENDING)
  createdAt DateTime   @default(now())

  // Relations
  user User @relation(fields: [userID], references: [id])
  show Show @relation(fields: [showID], references: [id])
}

model QRScanRecord {
  id        String   @id @default(uuid())
  qrCode    String
  scanTime  DateTime
  status    String
  scannedBy String
}
